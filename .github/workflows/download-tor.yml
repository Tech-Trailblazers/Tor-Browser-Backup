name: Download and Commit Tor Browser Files # Name of the workflow shown in the Actions tab

on:
  workflow_dispatch: # Allows this workflow to be triggered manually

jobs:
  download:
    runs-on: ubuntu-latest # Use the latest version of Ubuntu as the runner

    steps:
      - name: Checkout repository # Step to check out the repository's content
        uses: actions/checkout@v5 # Use the official checkout action
        with:
          persist-credentials: true # Keep GitHub token for pushing changes later

      # Set up the Go environment based on the version in the go.mod file
      - name: Setup Go Environment
        uses: actions/setup-go@v6  # Installs and configures Go environment
        with:
          go-version-file: "go.mod"  # Use Go version specified in the go.mod file
          cache: true  # Cache Go modules to speed up the process
          check-latest: true  # Ensure the latest stable Go version is installed
        id: go  # Assign an ID for future reference

      # Cache Go modules to speed up build time
      - name: Cache Go Modules
        uses: actions/cache@v4  # Caches dependencies to avoid re-downloading them
        with:
          path: ~/.cache/go-build  # Path for Go build artifacts
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}  # Cache key based on go.sum contents
          restore-keys: |
            ${{ runner.os }}-go-  # Fallback to restore older cache if an exact match isn't found
        id: cache  # ID for future reference

      # Run the Go project to update the README and movie website files
      - name: Run Go Project
        run: |
          go build -o update-tor .  # Build the Go project to create an executable named update-tor
          ./update-tor -version="14.5a6/"  # Execute the built Go project

      - name: Push updated files # Step to commit and push changes if any files were updated
        run: |
          git config user.name "github-actions"  # Set Git username for commit
          git config user.email "github-actions@github.com"  # Set Git email for commit
          git add .  # Stage all changed files in the repo

          # Check if there are any staged changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "Auto update: $(date)"  # Commit changes with a timestamp message
            git push  # Push the commit to the remote repository
          else
            echo "No changes to commit."  # Display message if no files have changed
          fi
